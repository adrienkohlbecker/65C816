!to "main.bin", plain
!cpu 65816
!initmem $ea

; Memory Map
;
; 0000 0000 0000 0000 0000 0000 - 0000 0000 1111 1111 1111 1111 | 000000 00FFFF | Bank 0 (see below)
; 0000 1000 0000 0000 0000 0000 - 0000 1111 1111 1111 1111 1111 | 080000 15FFFF | General Purpose RAM
;
; Bank0:
;
; 0000 0000 0000 0000 - 0000 0000 1111 1111 | 0000 - 00FF | Direct page
; 0000 0001 0000 0000 - 0000 0001 1111 1111 | 0100 - 01FF | Stack
; 0000 0010 0000 0000 - 0111 1111 0111 1111 |Â 0200 - 7F7F | General Purpose RAM
; 0111 1111 1000 0000 - 0111 1111 1111 1111 | 7F80 - 07FF | I/O
;
; I/O:
;
; 0111 1111 1000 0000 - 0111 1111 1000 1111 | 7F80 - 7F8F | I/O #0 | 65C22 VIA
; 0111 1111 1001 0000 - 0111 1111 1001 1111 | 7F90 - 7F9F | I/O #1
; 0111 1111 1010 0000 - 0111 1111 1010 1111 | 7FA0 - 7FAF | I/O #2
; 0111 1111 1011 0000 - 0111 1111 1011 1111 | 7FB0 - 7FBF | I/O #3
; 0111 1111 1100 0000 - 0111 1111 1100 1111 | 7FC0 - 7FCF | I/O #4
; 0111 1111 1101 0000 - 0111 1111 1101 1111 | 7FD0 - 7FDF | I/O #5
; 0111 1111 1110 0000 - 0111 1111 1110 1111 | 7FE0 - 7FEF | I/O #6
; 0111 1111 1111 0000 - 0111 1111 1111 1111 | 7FF0 - 7FFF | I/O #7

!address IO_0_VIA_PORTB       = $7F80 ; Output/Intput Register Port B
!address IO_0_VIA_PORTA       = $7F81 ; Output/Intput Register Port A
!address IO_0_VIA_DDRB        = $7F82 ; Data Direction Register Port B
!address IO_0_VIA_DDRA        = $7F83 ; Data Direction Register Port A
!address IO_0_VIA_T1CL        = $7F84 ; T1 Low Order Latches / Counter
!address IO_0_VIA_T1CH        = $7F85 ; T1 High Order Counter
!address IO_0_VIA_T1LL        = $7F86 ; T1 Low Order Latches
!address IO_0_VIA_T1LH        = $7F87 ; T1 High Order Latches
!address IO_0_VIA_T2CL        = $7F88 ; T2 Low Order Latches / Counter
!address IO_0_VIA_T2CH        = $7F89 ; T2 High Order Counter
!address IO_0_VIA_SR          = $7F8A ; Shift Register
!address IO_0_VIA_ACR         = $7F8B ; Auxiliary Control Register
!address IO_0_VIA_PCR         = $7F8C ; Peripheral Control Register
!address IO_0_VIA_IFR         = $7F8D ; Interrupt Flag Register
!address IO_0_VIA_IER         = $7F8E ; Interrupe Enable Register
!address IO_0_VIA_PORTA_NHDSK = $7F8F ; Output/Intput Register Port A but with no handshake

!address IO_1_DEBUG           = $7F90 ; Debug port

VIA_PCR_CA1_CONTROL = 0
VIA_PCR_CA2_CONTROL = 1
VIA_PCR_CB1_CONTROL = 4
VIA_PCR_CB2_CONTROL = 5

VIA_PCR_1_NEGATIVE_EDGE = 0
VIA_PCR_1_POSITIVE_EDGE = 1
VIA_PCR_2_NEGATIVE_EDGE = 000
VIA_PCR_2_INDEPENDENT_NEGATIVE_EDGE = 001
VIA_PCR_2_POSITIVE_EDGE = 010
VIA_PCR_2_INDEPENDENT_POSITIVE_EDGE = 011
VIA_PCR_2_HANDSHAKE_OUTPUT = 100
VIA_PCR_2_PULSE_OUTPUT = 101
VIA_PCR_2_LOW_OUTPUT = 110
VIA_PCR_2_HIGH_OUTPUT = 110

VIA_IR_CA2_ACTIVE_EDGE   = 1 << 0
VIA_IR_CA1_ACTIVE_EDGE   = 1 << 1
VIA_IR_COMPLETE_8_SHIFTS = 1 << 2
VIA_IR_CB2_ACTIVE_EDGE   = 1 << 3
VIA_IR_CB1_ACTIVE_EDGE   = 1 << 4
VIA_IR_T2_TIMEOUT        = 1 << 5
VIA_IR_T1_TIMEOUT        = 1 << 6
VIA_IR_ANY_INTERRUPT     = 1 << 7

VIA_PORT_A0        = 1 << 0
VIA_PORT_A1        = 1 << 1
VIA_PORT_A2        = 1 << 2
VIA_PORT_A3_KBD_OK = 1 << 3
VIA_PORT_A4_KBD_OE = 1 << 4
VIA_PORT_A5_LCD_RS = 1 << 5
VIA_PORT_A6_LCD_RW = 1 << 6
VIA_PORT_A7_LCD_E  = 1 << 7

VIA_PORT_B0_EXT0 = 1 << 0
VIA_PORT_B1_EXT1 = 1 << 1
VIA_PORT_B2_EXT2 = 1 << 2
VIA_PORT_B3_EXT3 = 1 << 3
VIA_PORT_B4_EXT4 = 1 << 4
VIA_PORT_B5_EXT5 = 1 << 5
VIA_PORT_B6_EXT6 = 1 << 6
VIA_PORT_B7_EXT7 = 1 << 7

VIA_DDRA_DEFAULT = (VIA_PORT_A4_KBD_OE | VIA_PORT_A5_LCD_RS | VIA_PORT_A6_LCD_RW | VIA_PORT_A7_LCD_E)
VIA_DDRB_DEFAULT = $00 ; all inputs

; zero page locations
!address kb_deadkey_flags = $03 ; 1 byte

*=$8000
main:
  ; initialize stack pointer to 01FF
  ldx #$ff
  txs

  ; put CPU in native mode
  clc
  xce

  ; select 8 bit registers
  sep #%00110000
  !rs
  !as

  ; enable interrupt on CB1
  lda # VIA_IR_ANY_INTERRUPT | VIA_IR_CB1_ACTIVE_EDGE
  sta IO_0_VIA_IER

  ; Set CB1 to positive going edge
  lda # VIA_PCR_1_POSITIVE_EDGE << VIA_PCR_CB1_CONTROL
  sta IO_0_VIA_PCR

  ; ensure external ports are 0
  stz IO_0_VIA_PORTA
  stz IO_0_VIA_PORTB

  ; Set PORTA to default output mode
  lda # VIA_DDRA_DEFAULT
  sta IO_0_VIA_DDRA

  ; Set PORTB to default output mode
  lda # VIA_DDRB_DEFAULT
  sta IO_0_VIA_DDRB

  jsr lcd_init
  jsr kbd_init

  ; enable interrupt handling
  cli

loop:
    jsr kbd_process_buffer

    jmp loop

irq:
    ; push data bank register and direct page register
    phb
    phd
    ; we dont know which mode the CPU was in before IRQ. Assume 16 bits and save 16 bits of registers
    rep #%00110000
    !rl
    !al
    pha
    phx
    phy
    ; Go back to 8 bit for the IRQ routine
    sep #%00110000
    !rs
    !as

    lda IO_0_VIA_IFR

    bit # VIA_IR_ANY_INTERRUPT
    beq .exit_irq

    bit # VIA_IR_CB1_ACTIVE_EDGE
    beq .exit_irq
    jsr kbd_interrupt

.exit_irq:
    ; we saved registers in 16 bit mode. Switch back to 16 bits for the restore
    rep #%00110000
    !rl {
    !al {
    ply
    plx
    pla
    pld
    plb
    rti
    ; note: We don't want code sitting after this to be assembled in a different mode so we use block syntax
    ; remember that !rl and !al only apply to these instructions.
    ; After rti the CPU M/X flags will be restored to whatever state it was in before the IRQ
    ;
    }
    }

!source "lib/macros.a"
!source "lib/lcd.a"
!source "lib/kbd.a"
!source "lib/shell.a"
!source "lib/binhex.a"

exit_rti:
  rti

; Vector locations
*=$ffe0
  !word $eaea    ; (reserved)
  !word $eaea    ; (reserved)
  !word exit_rti ; native, cop
  !word exit_rti ; native, brk
  !word exit_rti ; native, abort
  !word exit_rti ; native, nmi
  !word $eaea    ; (reserved)
  !word irq      ; native, irq
  !word $eaea    ; (reserved)
  !word $eaea    ; (reserved)
  !word exit_rti ; emulation, cop
  !word $eaea    ; (reserved)
  !word exit_rti ; emulation, abort
  !word exit_rti ; emulation, nmi
  !word main     ; emulation, reset
  !word exit_rti ; emulation, irq
