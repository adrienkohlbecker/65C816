!to "main.bin", plain
!cpu 65816
!initmem $ea

; Memory Map
;
; 0000 0000 0000 0000 0000 0000 - 0000 0000 1111 1111 1111 1111 | 000000 00FFFF | Bank 0 (see below)
; 0000 1000 0000 0000 0000 0000 - 0000 1111 1111 1111 1111 1111 | 080000 15FFFF | General Purpose RAM
;
; Bank0:
;
; 0000 0000 0000 0000 - 0000 0000 1111 1111 | 0000 - 00FF | Direct page
; 0000 0001 0000 0000 - 0000 0001 1111 1111 | 0100 - 01FF | Stack
; 0000 0010 0000 0000 - 0111 1111 0111 1111 |Â 0200 - 7F7F | General Purpose RAM
; 0111 1111 1000 0000 - 0111 1111 1111 1111 | 7F80 - 07FF | I/O
;
; I/O:
;
; 0111 1111 1000 0000 - 0111 1111 1000 1111 | 7F80 - 7F8F | I/O #0 | 65C22 VIA
; 0111 1111 1001 0000 - 0111 1111 1001 1111 | 7F90 - 7F9F | I/O #1
; 0111 1111 1010 0000 - 0111 1111 1010 1111 | 7FA0 - 7FAF | I/O #2
; 0111 1111 1011 0000 - 0111 1111 1011 1111 | 7FB0 - 7FBF | I/O #3
; 0111 1111 1100 0000 - 0111 1111 1100 1111 | 7FC0 - 7FCF | I/O #4
; 0111 1111 1101 0000 - 0111 1111 1101 1111 | 7FD0 - 7FDF | I/O #5
; 0111 1111 1110 0000 - 0111 1111 1110 1111 | 7FE0 - 7FEF | I/O #6
; 0111 1111 1111 0000 - 0111 1111 1111 1111 | 7FF0 - 7FFF | I/O #7

!address IO_0_VIA_PORTB       = $7F80 ; Output/Intput Register Port B
!address IO_0_VIA_PORTA       = $7F81 ; Output/Intput Register Port A
!address IO_0_VIA_DDRB        = $7F82 ; Data Direction Register Port B
!address IO_0_VIA_DDRA        = $7F83 ; Data Direction Register Port A
!address IO_0_VIA_T1CL        = $7F84 ; T1 Low Order Latches / Counter
!address IO_0_VIA_T1CH        = $7F85 ; T1 High Order Counter
!address IO_0_VIA_T1LL        = $7F86 ; T1 Low Order Latches
!address IO_0_VIA_T1LH        = $7F87 ; T1 High Order Latches
!address IO_0_VIA_T2CL        = $7F88 ; T2 Low Order Latches / Counter
!address IO_0_VIA_T2CH        = $7F89 ; T2 High Order Counter
!address IO_0_VIA_SR          = $7F8A ; Shift Register
!address IO_0_VIA_ACR         = $7F8B ; Auxiliary Control Register
!address IO_0_VIA_PCR         = $7F8C ; Peripheral Control Register
!address IO_0_VIA_IFR         = $7F8D ; Interrupt Flag Register
!address IO_0_VIA_IER         = $7F8E ; Interrupe Enable Register
!address IO_0_VIA_PORTA_NHDSK = $7F8F ; Output/Intput Register Port A but with no handshake

*=$8000
main:
  ; put CPU in native mode
  clc
  xce

  ; initialize stack pointer to 01FF
  ldx #$ff
  txs

  ; set registers to 16 bits (Set bits m and x to 0 in CPU status register)
  rep #%00110000
  !rl
  !al

  ; set port A and B to output
  lda #$ffff
  sta IO_0_VIA_DDRB

  ; set port A and B to 5555
  lda #$5555
  sta IO_0_VIA_PORTB

; ### Test bank0 RAM

restart:
  ; load into X the address of the end of RAM
  ldx #$7f7f
  dex ; align to 16 bits

loop:
   ; store 16 bits of data at X and X+1 and verify we read the same thing
  txa
  sta $0,X ; direct page indexed
  cmp $0,X
  bne fail

  ; decrement address
  dex
  dex

  ; continue until X=0
  bne loop

; ### Test extended RAM

  ldy #$8 ; store bank number 8 into Y

loop_dbr:
  ; set indexes to 8 bits
  sep #%00010000
	!rs

  phy
  ldy #0
  phy
  plb

  ror IO_0_VIA_PORTB

  ply
  phy
  plb ; pull value into Data Bank Register, effectively changing bank for all data accesses

  ; set indexes to 16 bits
  rep #%00010000
	!rl

  ldx #$ffff
  dex ; align to 16 bits

loop_ext:
   ; store 16 bits of data at X and X+1 and verify we read the same thing
  txa
  sta $0000,X ; absolute indexed
  cmp $0000,X
  bne fail

  ; decrement address
  dex
  dex

  ; continue until X=0
  bne loop_ext

  ; increment Y
  iny
  cpy #$10
  bne loop_dbr
  jmp restart

fail:
  wai

*=$fffc
  !word main
  !word $eaea
